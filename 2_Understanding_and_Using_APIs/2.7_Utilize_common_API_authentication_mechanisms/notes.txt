Basic auth:

https://docs.postman-echo.com/?version=latest#42c867ca-e72b-3307-169b-26a478b00641

JWT (JSON Web Tokens):

https://jwt.io/

Header: Defines the algo and type.
Payload: Defines the data in JSON
Verify Signature: Your custom secret

- No sessions
- Stateless
- Speed
- Balancing


Most APIs require some sort of authentication

Authentication vs authorization

Authentication = signing in
Authorization = allowed to do what you are trying to do

Base64 Encoding vs. Encryption
- Base64
    Not Encryption
    Not secured in any fashion
    Allows us to transmit binary data over systems that use text
    Encoding is, by design, reversible
    Encoding makes data 'URL safe'
- Encryption
    Modern https uses TLS
    Obscures data
    Not reversible without private key
    Encrypted with public key

HTTP Basic Authentication
- RFC 7617
- Plain text username and password are collected from a user and transmitted in Header
    header is called Authorization: <type> <u:p>
    type will always be Basic
    <u:p> is base64 encoded
- Always use https so that it is encrypted
- Retransmitted with every request

API Key Authentication
- Single token, meant to be stored in program or app
- Token generated by resource you are accessing
- Authorization: <type> <token>
    type == apikey

Token Authentication
- Most popular form on the web today
- Javascript Web Tokens (JWTs) are the most popular form
    JSON data w/ cryptographic Signature
- User signs in and gets token
- JWT == bearer token
- Supports statelessness
    Speed - Don't need to hit storage/db for every request
    Balancing - can distribute requests across servers



DNA Center 
Basic auth w/ Token returned and resent with requests
