-Ansible, Puppet, and Chef bring ease of use, predictability, discipline, and the ability to work at scale to DevOps work.
-Automation tooling partly works by wrapping shell functionality, operating system utilities, API functions and other control plane 
 elements for simplicity, uniformity, feature enrichment, and compatibility in DevOps scenarios.
-Every automation tool has one or more functions that execute basic commands and scripts on targets and return results.
    in Ansible, these functions include command, shell, and raw.
-Rare to look deep down into tool-maintained infra-as-code repos without finding some scripting

Shells are ubiquitous, so shell scripting is historically the bedrock of automation.

-Bash
    -The Unix shell is known as Bash, and is the default on most Linux distributions and on macOS
    -Using Bash, Python, or other conventional languages for automation usually means writing an imperative procedure
        -an ordered sequence of commands aimed at achieving a goal.
    -Developing a procedure
        -Determine if it's running in a Debian or a CentOS environment, and use the correct package manager (apt or yum) and syntax.
        -Determine if our target app is already installed in an appropriate version, and only try installing it if it's not present, 
         stopping otherwise and making no further changes.
        -Determine if it has made a copy of each config file before changing it, and use stream editors (awk, sed, and so on) to make 
         changes neatly and precisely, rather than carelessly appending text to config files, and hoping the applications that consume 
         these files won't break.
    -As you develop and refine the scripts further,
        -Discover, inventory, and compile information about target systems, and ensure the scripts do this by default.
        -Encapsulate the complexity of safely installing applications, making config file backups and changes, and restarting services 
         into reusable forms, such as subsidiary scripts containing parameters, function libraries, and other information.
    -Ensure the scripts are efficient and reusable
        -Standardize the ordering and presentation of parameters, flags, and errors.
        -Create a code hierarchy that divides tasks logically and efficiently.
        -Create high-level scripts for entire deployments and lower-level scripts for deployment phases.
        -Separate deployment-specific data from the code, making the code as generic and reusable as possible.
-The goal of almost any script is to achieve a desired state in a system


-Automation tools like Ansible, Puppet, or Chef offer powerful capabilities compared to ad-hoc automation 
 strategies using BASH, Python, or other programming languages.
-Automation tool modules enable best practices that make code safer and idempotency easier to achieve. 
-Ansible functions can back up configuration files on target systems or retrieve copies and store them 
 locally on a deployer machine before making changes, enabling recovery if a deployment breaks or is interrupted.
-Automation tools typically "gather facts" from target devices as a default in the normal course of operations.
    -Hardware configuration, BIOS settings, operating system, configuration of network and other peripheral cards 
     and subsystems, installed applications, and other details.
-Some tools, like Cisco ACI, can also gather configuration details from individual devices and higher-order virtualization frameworks.
-Most automation tools can work in a local mode — basically running on a laptop — as well as a "client/server" or "distributed agent" mode, 
 enabling the tool to manage thousands or tens of thousands of nodes.

Procedure vs. Declarative

-Ansible and Puppet, for example, are often described as employing declarative Domain-Specific Languages (DSLs), whereas Chef is said to be more inherently procedural.
-Ansible is based on Python, Puppet and Chef are built on Ruby. All can make use of both declarative and procedural techniques as needed, 
 and many real-world automation tasks require both approaches.

-Provisioning 
    refers to obtaining compute, storage, and network infrastructure (real or virtual), enabling communications, putting it into service, and making it ready 
    for use by operators and developers (e.g., by installing an operating system, machine-level metrics, ssh keys, and the lowest level of operations tooling).

-Configuration 
    means installing base applications and services and performing the operations, tasks, and tests required to prepare a low-level platform to deploy 
    applications or a higher-level platform.

-Deployment 
    involves building, arranging, integrating, and preparing multi-component applications (such as database clusters) or higher-level platforms 
    (like Kubernetes clusters), often across multiple nodes.

-Orchestration 
    may refer to several things. When meant concretely, it usually refers to user-built or platform-inherent automation aimed at managing workload lifecycles 
    and reacting dynamically to changing conditions (e.g., by autoscaling or self-healing), particularly in container environments. When meant abstractly, 
    it may refer simply to processes or workflows that link automation tasks to deliver business benefits, like self-service.


-Not stateless: An app that saves important information in files or in a database on the local file.
-Stateless: An app that persists its state to a separate database or that provides service that requires no memory of state between invocations.

-Ansible
    -Ansible's control node runs on virtually any Linux machine running Python 2 or 3, including a laptop, a Linux VM residing on a laptop of any kind, 
    or on a small virtual machine adjacent to cloud-resident resources under management. All system updates are performed on the control node.
    -The control node connects to managed resources over SSH. Through this connection, Ansible can:
        -Run shell commands on a remote server or transact with a remote router or other network entity via its REST interface.
        -Inject Python scripts into targets and remove them after they run
        -Install Python on target machines if required.
    -Plugins enable Ansible to gather facts from and perform operations on infrastructure that can't run Python locally, such as cloud provider REST interfaces.
    -Ansible is substantially managed from the Bash command line, with automation code developed and maintained using any standard text editor.

-Installing
    #sudo apt-add-repository- ppa:ansible/ansible
    #sudo apt install ansible -y
    -Configure remote access to devices
    -Inventory file
        [Group Name]
        hostname
        ip
    -Modules included for different vendors/protocols
    -Playbook files, ran against devices, written in YAML
        #ansible-playbook playbook.yml # to run playbook
    -Output for each task, OK, Changed, unreachable, failed, skipped, rescued, ignore
    -Variables and facts
        Declare variables and inject with {{}}
        Facts are gathered when Ansible connects
            Run tasks based on those facts
    -when statement
        using facts as well
    -loops
        {{items}}
        with_items:
    -environment variables, .ansible_env
    -host_vars, group_vars
-Ansible documentation
    -Modules and required variables


Cisco NSO, Network Services Orchestrator

- "Build your own" network controller
- Works with legacyIOS and 3rd party devices
- REST API (XML or JSON) + Python/Java SDK
- Various vnd.yang headers
- 